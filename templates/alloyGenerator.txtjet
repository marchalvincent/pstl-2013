<%@ jet package="com.upmc.pstl2013.alloyGenerator" class="JetTemplate" 
	imports="com.upmc.pstl2013.util.Console 
			org.eclipse.emf.common.util.EList
			org.eclipse.uml2.uml.*" %>
<% 
	if (!(argument instanceof IJetHelper)) {
		Console.warning("L'argument passÃ© au template Jet n'est pas un IJetHelper.", this.getClass());
		//TODO throw exception?? voir les squeleton...
		return stringBuffer.toString();
	}
	IJetHelper jetHelper = (IJetHelper) argument;
%>

module process

open syntax
open semantic

fact initTokens {
	Init[  
		Initial -> 1 , 			// tokens //TODO pour chaque noeud Initial, NOM1 -> 1 + NOM2 -> 1 + 
		ActivityEdge -> 0  // offers	
	]
}

// Timing
one sig T extends Timing {} {
	timing = (ActivityNode -> 0) 
}

// Role Performer
one sig Yoann extends RolePerformer {}
one sig P extends Performer {} {
	performer = ActivityNode -> Yoann
}

// TODO faire le traitement
<%
	EList<ActivityNode> nodes = jetHelper.getNodes();
	EList<ActivityEdge> edges = jetHelper.getEdges();
	
	stringBuffer.append("------Generated Nodes------" + nl);
	for (ActivityNode node : nodes) {
		stringBuffer.append("one sig " + node.getName() + " extends " + node.eClass().getName() + " {}{}" + nl);
	}
	
	stringBuffer.append(nl + nl + "------Generated Edges------" + nl);
	for (ActivityEdge edge : edges) {
		stringBuffer.append("one sig " + edge.getName() + " extends " + edge.eClass().getName() + " {}{" + nl);
		stringBuffer.append("    source = " + edge.getSource().getName() + nl);
		stringBuffer.append("    target = " + edge.getTarget().getName() + nl);
		stringBuffer.append("}" + nl);
	}
%>


pred final {	
	//some s : State | s.getTokens[Final] = 1 // 4 Solution
	some s:State | s.getTokens[Final] > 0
}



/////////////


pred testAll {
	final 
}

assert tall {
	testAll
}

//TODO le nombre peux State peux augmenter ex: 20 State ou 30 State etc...
run testAll for 0 but 20 State ,  15 Object, 5 ActivityNode, 4 ActivityEdge expect 1
check tall for 20 State ,  15 Object, 5 ActivityNode, 4 ActivityEdge expect 0




/** *Visualization Variables */
// http://alloy.mit.edu/community/node/548
fun vNodeExecuting : State->ActivityNode {
   {s:State, a:ActivityNode | s.getTokens[a] > 0}
}
fun vEdgeHaveOffers : State->ActivityEdge {
   {s:State, e:ActivityEdge | s.getOffers[e] > 0}
}

fun pinInNode : State->Action->Pin->Int {
	 {s:State, a:Action, p:a.output+a.input, i:s.getTokens[p]}
}
