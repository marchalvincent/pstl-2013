<%@ jet package="com.upmc.pstl2013.alloyGenerator.jet.impl" class="ProperCompletionWeakTemplate" 
	imports="org.apache.log4j.Logger
			com.upmc.pstl2013.alloyGenerator.jet.*
			com.upmc.pstl2013.properties.*"
	skeleton="../alloyGenerator.skeleton" %>
<% 
	final Logger log = Logger.getLogger(ProperCompletionWeakTemplate.class);
	if (!(argument instanceof IProperties)) {
		final String error = "L'argument passÃ© au template Jet n'est pas une IProperties.";
		log.error(error);
		throw new JetException(error);
	}

	IProperties property = (IProperties) argument;
	final String predicatName = property.getString("predicatName");
%>

pred <%=predicatName%> {<%
	String allFinalNodes = property.getString("finalNode");
	String[] finalNodes = allFinalNodes.split("---");
	StringBuilder sbHasToken = new StringBuilder();
	StringBuilder sbActivityNode = new StringBuilder();
	boolean first = true;
	for(String finalN : finalNodes) {
		if (!first) {
			sbHasToken.append(" or ");
			sbActivityNode.append(" + ");
		}
		sbHasToken.append("s.hasTokens[");
		sbHasToken.append(finalN);
		sbHasToken.append("]");
		sbActivityNode.append(finalN);
		first = false;
	}
	%>
	let finalState = {s:State | ( <%=sbHasToken.toString()%> ) } {
		all s:finalState | not s.hasTokens[ActivityNode-( <%=sbActivityNode.toString()%> ) ]
	}
}

<%
	final String inc = property.getString("nbState");
	final String nbObjects = property.getString("nbObjects");
	final String nbNodes = property.getString("nbNodes");
	final String nbEdges = property.getString("nbEdges");
	final String bitwidth = property.getString("bitwidth");
%>
run {<%=predicatName%>} for 0 but <%=inc%> State, <%=nbObjects%> Object, <%=nbNodes%> ActivityNode, <%=nbEdges%> ActivityEdge, <%=bitwidth%> Int
