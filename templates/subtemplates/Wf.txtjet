<%@ jet package="com.upmc.pstl2013.alloyGenerator.jet.impl" class="WfTemplate" 
	imports="org.apache.log4j.Logger
			com.upmc.pstl2013.alloyGenerator.jet.*
			com.upmc.pstl2013.properties.*"
	skeleton="../alloyGenerator.skeleton" %>
<% 
	final Logger log = Logger.getLogger(WfTemplate.class);
	if (!(argument instanceof IProperties)) {
		final String error = "L'argument passÃ© au template Jet n'est pas une IProperties.";
		log.error(error);
		throw new JetException(error);
	}

	IProperties property = (IProperties) argument;
	final Boolean isInitial = property.getBoolean("initial");
	final Boolean isFinal = property.getBoolean("final");
	final Boolean isMerge = property.getBoolean("merge");

	// CAS INITIAL
	if (isInitial) {
%>
fact initialNode {
	all n : InitialNode | {
		#n.incoming = 0 // [1] An initial node has no incoming edges.
	}
}
fact initialNode2 {
	no edge : ObjectFlow | edge.source in InitialNode // [2] Only control edges can have initial nodes as source.
}
<% 
	}
	
	// CAS FINAL
	if (isFinal) {
%>
fact activityFinalNode {
	all n : ActivityFinalNode | {
		#n.outgoing = 0//	[1] A final node has no outgoing edges.
	}
}
<%
	}
	
	//CAS MERGE
	if (isMerge) {
%>
fact mergeNode {
	all n : MergeNode | {
		#n.outgoing = 1 // [1] A merge node has one outgoing edge.
		and
		// [2] The edges coming into and out of a merge node must be either all object flows or all control flows.
		all edgeIn : n.incoming, edgeOut : n.outgoing | 
			(edgeIn in ControlFlow and edgeOut in ControlFlow)
			or
			(edgeIn in ObjectFlow and edgeOut in ObjectFlow)
	}
}
<%
	}

	// et le petit run a la fin...
	final String nbObjects = property.getString("nbObjects");
	final String nbNodes = property.getString("nbNodes");
	final String nbEdges = property.getString("nbEdges");
	final String bitwidth = property.getString("bitwidth");
%>
run {} for 0 but 0 State, <%=nbObjects%> Object, <%=nbNodes%> ActivityNode, <%=nbEdges%> ActivityEdge, <%=bitwidth%> Int
